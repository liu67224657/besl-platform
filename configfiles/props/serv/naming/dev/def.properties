#
# Sample props file for naming server.
#

# The port on which to run the server.
#
server.port=7500

# Max request threads. The server will allocate a pool (on demand) of
# request threads to be used for processing requests coming from the
# client.

server.maxReqThreads=100

# This is the no. of seconds between the running of the monitor thread.
# The monitor thread just spits out server info, and really doesn't
# do much else.

server.monInterval=30
#
# How often to run the vulture thread in seconds. The vulture thread
# will close any service connections that have not pinged the server
# in a while. 
#
server.vultureInterval = 60
#
# How long to wait before we close a connection because of a missing ping.
# In seconds.
#
server.connTimeout = 300

# How often to run the thread that sends out change events. In order to
# not flood the system with change events during startup, we will only
# send change events at a certain frequency. This settings sets that
# frequency. In seconds.
#
# NOTE: Set this to 0 in order to turn off events (which would be the
# the thing to do if we run into performance problems).
#

server.changeEventInterval = 60

# Backchannel port. This is the port used by other naming servers
# to communicate with this naming server. It defaults to 7600.
#
server.backChannelPort=7600

#
# How often to ping the back channels (ie, the conns between naming servers).
#
server.backChannelPing = 60

# The timeout for a backchannel conn. If no pings are received within
# the following time interval, the conn is determined to be dead and
# closed. In seconds.

server.backChannelTimeout = 180

# This is a white-space separated list of naming servers that this
# particular naming server will communicate with. For simplicity,
# you can specify the addresses of all the naming servers in the
# system and the one corresponding to this naming server will be
# excluded for you.
#
# Each entry is of the form: <ip>:<port>, the <port> entry is the 
# backchannel port. You should specify all of the entries for all of the
# naming servers in this property. You can even specify this particular
# server, and it will be excluded by the code.Each entry in this ropertyExample:
#
#  'server.namingServices=naming01.fivewh.com:7600 naming02.fivewh.com:7600'
#
# The syntax also supports a virtual address, eg:
#
# 'server.namingServices=naming.fivewh.com:7600'
#
# An nslookup will be performed on the above, and the N addresses returned
# will be used as the set of naming servers. They will all need to listen
# on the same port however.
#
# In systems where you just have one naming server, you can just comment
# this out.
#
server.namingServices=web001.dev:7600 web002.dev:7601

#
# How often to run the thread that checks for load balancing. The
# number is in SECONDS.
#
server.loadCheckInterval=20

# How long to wait between each load balance operation. Ie, once
# the server determines that it is overloaded, it will begin notifying
# its clients that they need to go elsewhere. The following is the
# delay between each client. The number is in MSECS.
#
server.loadCheckWait=1000

# This setting determins the max load on the server. The value is
# the total number of local services + event clients. Essentially the
# number of threads. This number is printed in the log every
# server.monInterval seconds. What happens when the load goes above
# the following value, is that the server will try to re-balance
# itself by asking other less loaded naming servers to take up the load.
# In any case, even if all servers are overloaded, nothing bad should happen
# in terms of the userLogic. Things should behave the same. However, we can
# easily run into performance problems if left unchecked.
# 
server.maxLoad=2500

#This setting controls when we decide that the server is too busy to
# do event processing. The number is in registrations/minute. So if
# the current rate is > server.maxRate, then event processing is not
# performed. The default is 30.

#server.maxRate=30

# This setting controls when to terminate event processing after it has 
# already started. So when the event thread wakes up, it begins trying
# to send events to everybody. After each send to a client, it will check
# to see how long it's been doing this for. If > server.eventCutOffTime,
# then it stops processing and goes back to sleep. The number is in 
# seconds and the default = 10 seconds.
#
#server.eventCutOffTime=10
#
# How long to wait at server startup before trying to send out events.
# Since the early life of a ns can be very busy, we use the following
# setting to avoid event sending. The setting is in seconds. The default
# is set to 5 minutes.
#
#server.startWaitTime=0

# The logging severity level. The lower the level the more debugging
# output. Values: detail, low, medium, high, none. The value is
# case-insensitive.

logger.severity=low
